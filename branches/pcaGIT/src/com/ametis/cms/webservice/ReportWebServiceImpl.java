package com.ametis.cms.webservice;

import java.sql.Date;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.StringTokenizer;
import java.util.Vector;

import javax.jws.WebService;

import org.hibernate.Query;
import org.hibernate.Session;

import com.ametis.cms.dao.ClaimItemDao;
import com.ametis.cms.dao.MemberDao;
import com.ametis.cms.datamodel.Claim;
import com.ametis.cms.datamodel.ClaimItem;
import com.ametis.cms.datamodel.Member;
import com.ametis.cms.datamodel.MemberGroup;
import com.ametis.cms.datamodel.ReportRequest;
import com.ametis.cms.dto.ClaimDto;
import com.ametis.cms.dto.ClaimItemDto;
import com.ametis.cms.dto.MemberDto;
import com.ametis.cms.dto.MemberGroupDto;
import com.ametis.cms.service.ClaimItemService;
import com.ametis.cms.service.ClaimReportService;
import com.ametis.cms.service.ClaimService;
import com.ametis.cms.service.MemberGroupService;
import com.ametis.cms.service.MemberService;
import com.ametis.cms.service.ReportRequestService;

//Generated by MyEclipse
@WebService(name = "ReportWebService", endpointInterface = "com.ametis.cms.webservice.IReportWebService",
		serviceName="ReportWebService")
public class ReportWebServiceImpl implements IReportWebService {

	private ClaimReportService claimReportService;
	private ClaimService claimService;
	private ClaimItemService claimItemService;
	private MemberDao memberDao;
	private MemberService memberService;
	private MemberGroupService memberGroupService;
	private ClaimItemDao claimItemDao;
	private ReportRequestService reportRequestService;

	
	
	
	public ReportRequestService getReportRequestService() {
		return reportRequestService;
	}

	public void setReportRequestService(ReportRequestService reportRequestService) {
		this.reportRequestService = reportRequestService;
	}

	public ClaimItemDao getClaimItemDao() {
		return claimItemDao;
	}

	public void setClaimItemDao(ClaimItemDao claimItemDao) {
		this.claimItemDao = claimItemDao;
	}

	public MemberGroupService getMemberGroupService() {
		return memberGroupService;
	}

	public void setMemberGroupService(MemberGroupService memberGroupService) {
		this.memberGroupService = memberGroupService;
	}

	public MemberService getMemberService() {
		return memberService;
	}

	public void setMemberService(MemberService memberService) {
		this.memberService = memberService;
	}

	public MemberDao getMemberDao() {
		return memberDao;
	}

	public void setMemberDao(MemberDao memberDao) {
		this.memberDao = memberDao;
	}

	public ClaimReportService getClaimReportService() {
		return claimReportService;
	}

	public void setClaimReportService(ClaimReportService claimReportService) {
		this.claimReportService = claimReportService;
	}

	public ClaimService getClaimService() {
		return claimService;
	}

	public void setClaimService(ClaimService claimService) {
		this.claimService = claimService;
	}

	public ClaimItemService getClaimItemService() {
		return claimItemService;
	}

	public void setClaimItemService(ClaimItemService claimItemService) {
		this.claimItemService = claimItemService;
	}

	public Collection<Object> generateReport(String keyword,
			String keyCategory, Date start, Date end, Integer status,
			Integer jenisLayanan, Integer jenisClaim) throws Exception {
		// TODO Auto-generated method stub
		
		Collection<Object> result = null;
		try {
			result = claimReportService.generateClaimReport(keyword, keyCategory, start, end, status, jenisLayanan, jenisClaim);
		}
		catch (Exception e){
			e.printStackTrace();
		}
		return result;
	}
	
	public Collection<ClaimDto> getListClaim (String keyword) throws Exception {
		Collection<ClaimDto> result = new Vector<ClaimDto>();
		
		try {
			StringTokenizer tokenizer = new StringTokenizer(keyword);
			
			while (tokenizer.hasMoreTokens()){
				String claimId = tokenizer.nextToken();
				
				if (claimId != null){
					ClaimDto hasilClaim =  getClaim(claimId);
					
					if (hasilClaim != null){
						result.add(hasilClaim);
					}
				}
			}
		}
		catch (Exception e){
			e.printStackTrace();
		}
		return result;
	}

	public ClaimDto getClaim(String claimId) throws Exception {
		// TODO Auto-generated method stub
		ClaimDto result = null;
		try {
			Claim claim = claimService.get(Integer.valueOf(claimId));
			
			
			if (claim != null){
				
				result = claim.exportDto();
				System.out.println("CLAIM NUMBER EXTRACTED : " + result.getClaimNumber());
				
				Vector<ClaimItemDto> claimItemVector = new Vector<ClaimItemDto>();
				
				Collection<ClaimItem> claimItemList = claimItemService.getClaimItem(Integer.valueOf(claimId));
				
				for (ClaimItem item : claimItemList){
					if (item != null){
						ClaimItemDto itemDto = new ClaimItemDto();
						itemDto.setBenefitRemarks(item.getBenefitCheckRemarks());
						itemDto.setClaimItemAmount(item.getClaimItemAmount());
						itemDto.setClaimItemApprovedValue(item.getClaimItemApprovedValue());
						itemDto.setClaimItemName(item.getItemId().getItemName());
						itemDto.setClaimItemValue(item.getClaimItemValue());
						itemDto.setClaimNumber(item.getClaimId().getClaimNumber());
						itemDto.setDescription(item.getClaimItemDescription());
						itemDto.setExcessValue(item.getExcessValue());
						itemDto.setItemCode(item.getItemId().getItemCode());
						
						
						claimItemVector.add(itemDto);
					}
				}
				
				result.setClaimItemList(claimItemVector);
			}
		}
		catch (Exception e){
			e.printStackTrace();
		}
		return result;
	}

	public Integer getTotalRecord(String keyword, String keyCategory, Date start,
			Date end, Integer status, Integer jenisLayanan, Integer jenisClaim)
			throws Exception {
		Integer result = null;
		try {
			result = claimReportService.getTotalClaimStatisticReport(keyword, keyCategory, start, end, status, jenisLayanan, jenisClaim);
		}
		catch (Exception e){
			e.printStackTrace();
		}
		return result;
	}
	public Collection<ClaimItemDto> getMemberClaimDetailList(Integer memberId,
			Date startDate, Date endDate) {
		// TODO Auto-generated method stub
		Collection<ClaimItemDto> result = new Vector<ClaimItemDto>();
		
		try {
			Collection<ClaimItem> hasil = claimItemService.getMemberClaimItem(memberId, startDate, endDate);
			if (hasil != null){
				for (ClaimItem claimItem : hasil) {
					if (claimItem != null){
						result.add(claimItem.export());
					}
				}
			}
		}
		catch (Exception e){
			e.printStackTrace();
		}
		
		return result;
	}


	public Collection<ClaimDto> getMemberClaimList(Integer memberId,
			Date startDate, Date endDate) {
		
		Collection<ClaimDto> result = new Vector<ClaimDto>();
		
		try {
			String[] eqParam = {"memberId.memberId"};
			Object[] eqValue = {memberId};
			String[] required = {};
			
			Object[] start = {startDate};
			Object[] end = {endDate};
			String[] between = {"claimDate"};
			int total = claimService.getTotal(null,null,eqParam,eqValue,"claimDate",startDate,endDate);
			Collection<Claim> list = claimService.search(null,null,eqParam,eqValue,between,start,end,required,0,total);
			
			if (list != null){
				for (Claim claim : list) {
					ClaimDto dto = claim.exportDto();
					
					result.add(dto);
				}
			}
			
			
		}
		catch (Exception e){
			e.printStackTrace();
		}
		return result;
	}

	public Collection<MemberDto> getDependentList(String memberId) {
		// TODO Auto-generated method stub
		
		Collection<MemberDto> result = new Vector<MemberDto>();
		try {
		
			Collection<Member> tmpRes = memberService.getDependentList(Integer.valueOf(memberId));
			
			for (Member member : tmpRes) {
				MemberDto dto = new MemberDto();
				dto.setFirstName(member.getFirstName());
				dto.setCustomerNumber(member.getCustomerNumber());
				dto.setCustomerPolicyNumber(member.getCustomerPolicyNumber());
				dto.setMemberId(member.getMemberId());
				dto.setBirthday(member.getBirthday());
				dto.setCurrentBenefitCode(member.getCurrentProductCode());
				dto.setGender(member.getGender());
				dto.setEffectiveDate(member.getEffectiveDate());
				dto.setJoinDate(member.getJoinDate());
				dto.setExpireDate(member.getExpireDate());
				dto.setResignedDate(member.getResignedDate());
				dto.setBank(member.getBank());
				dto.setBankAccount(member.getBankAccount());
				dto.setBankAccountName(member.getBankAccountName());
				dto.setBankBranch(member.getBankBranch());
				result.add(dto);
			}
			
		}
		catch (Exception e){
			e.printStackTrace();
		}
		return result;
	}

	public Collection<MemberDto> getParentList(String memberGroupId) {
		// TODO Auto-generated method stub
		Collection<MemberDto> result = new Vector<MemberDto>();
		try {
		
			Collection<Member> tmpRes = memberService.getParentList(Integer.valueOf(memberGroupId));
			
			for (Member member : tmpRes) {
				MemberDto dto = new MemberDto();
				dto.setFirstName(member.getFirstName());
				dto.setCustomerNumber(member.getCustomerNumber());
				dto.setCustomerPolicyNumber(member.getCustomerPolicyNumber());
				dto.setMemberId(member.getMemberId());
				dto.setBirthday(member.getBirthday());
				dto.setCurrentBenefitCode(member.getCurrentProductCode());
				dto.setGender(member.getGender());
				dto.setEffectiveDate(member.getEffectiveDate());
				dto.setJoinDate(member.getJoinDate());
				dto.setExpireDate(member.getExpireDate());
				dto.setResignedDate(member.getResignedDate());
				dto.setBank(member.getBank());
				dto.setBankAccount(member.getBankAccount());
				dto.setBankAccountName(member.getBankAccountName());
				dto.setBankBranch(member.getBankBranch());
				
				result.add(dto);
			}
			
		}
		catch (Exception e){
			e.printStackTrace();
		}
		return result;
	}

	public Collection<MemberDto> getParentListByAlphabet(String memberGroupId,
			String character) {
		// TODO Auto-generated method stub
		Collection<MemberDto> result = new Vector<MemberDto>();
		try {
		
			Collection<Member> tmpRes = memberService.getParentListByAlphabet(Integer.valueOf(memberGroupId),character);
			
			for (Member member : tmpRes) {
				MemberDto dto = new MemberDto();
				dto.setFirstName(member.getFirstName());
				dto.setCustomerNumber(member.getCustomerNumber());
				dto.setCustomerPolicyNumber(member.getCustomerPolicyNumber());
				dto.setMemberId(member.getMemberId());
				dto.setBirthday(member.getBirthday());
				dto.setCurrentBenefitCode(member.getCurrentProductCode());
				dto.setGender(member.getGender());
				dto.setEffectiveDate(member.getEffectiveDate());
				dto.setJoinDate(member.getJoinDate());
				dto.setExpireDate(member.getExpireDate());
				dto.setResignedDate(member.getResignedDate());
				dto.setBank(member.getBank());
				dto.setBankAccount(member.getBankAccount());
				dto.setBankAccountName(member.getBankAccountName());
				dto.setBankBranch(member.getBankBranch());
				
				result.add(dto);
			}
			
		}
		catch (Exception e){
			e.printStackTrace();
		}
		return result;
	}

	public Collection<MemberGroupDto> getMemberGroupList() {
		Collection<MemberGroupDto> resultList = null;
		
		try {
			Collection<MemberGroup> groupList = memberGroupService.getAll();
			
			if (groupList != null && groupList.size() > 0){
				resultList = new Vector<MemberGroupDto>();
				Iterator<MemberGroup> iterator = groupList.iterator();
				
				while (iterator.hasNext()){
					MemberGroupDto result = new MemberGroupDto();
					MemberGroup group = iterator.next();
					
					result.setEffectiveDate(group.getEffectiveDate().toString());
					result.setExpireDate(group.getExpireDate().toString());
					result.setJoinDate(group.getJoinDate().toString());
					result.setMemberGroupCode(group.getMemberGroupCode());
					result.setMemberGroupId(group.getMemberGroupId().toString());
					result.setMemberGroupName(group.getGroupName());
					result.setRenewalDate(group.getRenewalDate() == null ? "" : group.getRenewalDate().toString());		
					
					resultList.add(result);
				}
			}
		}
		catch (Exception e){
			e.printStackTrace();
		}
		
		return resultList;
	}

	
	public ReportRequest getReportRequest(Integer id) throws Exception {
		ReportRequest result = null;
		try {
			result = reportRequestService.get(id);
		}
		catch (Exception e){
			e.printStackTrace();
		}
		return result;
	}

}